{"version":3,"sources":["components/NavBar.js","components/Alphabet.js","components/Contacts.js","components/NotFound.js","routes/routes.js","components/ContactDetails.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","thisClient","handleInputChange","Navbar","bg","variant","expand","sticky","Toggle","aria-controls","Collapse","id","Nav","className","Brand","src","avatar","width","height","alt","name","Form","inline","FormControl","type","placeholder","onChange","Alphabet","handleButtonClick","letter","toUpperCase","split","map","x","index","Pagination","Item","active","onClick","e","key","clients","sort","a","b","localeCompare","Contacts","state","allClients","filtered","searchTerm","event","target","innerText","startsWithN","filter","client","charAt","setState","console","log","value","filteredClients","person","toLowerCase","includes","toLocaleLowerCase","length","pages","Math","ceil","handlePagination","this","slice","offset","items","number","push","Col","sm","Row","md","Alert","dismissible","Heading","Card","ListGroup","params","testvalue","to","Component","NotFound","home","ContactDetails","setRedirect","redirect","renderRedirect","connections","filteredConnections","props","match","find","connectionsOfClient","xs","CardColumns","connection","Body","Title","Text","description","App","Container","fluid","path","routes","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"++pkBAsCeA,EAnCA,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,kBAC5B,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,KAAKC,OAAO,OAClD,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBACjBV,EACC,oCACE,kBAACW,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACV,EAAA,EAAOW,MAAR,KACE,yBACEC,IAAKd,EAAWe,OAChBC,MAAM,KACNC,OAAO,KACPL,UAAU,2BACVM,IAAKlB,EAAWmB,QAGpB,kBAACjB,EAAA,EAAOW,MAAR,KAAeb,EAAWmB,QAG5B,KACJ,kBAACC,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CACEH,KAAK,SACLI,KAAK,OACLC,YAAY,SACZZ,UAAU,UACVa,SAAUxB,Q,wCCVPyB,EAjBE,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,kBAAmBC,EAAa,EAAbA,OAErC,MADiB,6BAA6BC,cAAcC,MAAM,IAClDC,KAAI,SAACC,EAAGC,GACtB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,KAAZ,CACEC,OAAQJ,IAAMJ,EACdS,QAAS,SAAAC,GAAC,OAAIX,EAAkBW,IAChCC,IAAKN,GAEJD,Q,QCLXQ,EAAQC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEvB,KAAKyB,cAAcD,EAAExB,S,IAiH/B0B,E,2MA9GbC,MAAQ,CACNC,WAAYP,EACZQ,SAAU,GACVC,WAAY,GACZrB,OAAQ,I,EAYVD,kBAAoB,SAAAuB,GAAU,IACpBH,EAAe,EAAKD,MAApBC,WACFnB,EAASsB,EAAMC,OAAOC,UACtBC,EAAcN,EAAWO,QAC7B,SAAAC,GAAM,OAAIA,EAAOpC,KAAKqC,OAAO,KAAO5B,KAGtC,EAAK6B,SAAS,CACZT,SAAS,YAAKK,GACdzB,Y,EAIJ3B,kBAAoB,SAAAqC,GAClBoB,QAAQC,IAAI,mBADW,IAEfZ,EAAe,EAAKD,MAApBC,WACFE,EAAaX,EAAEa,OAAOS,MACtBC,EAAkBd,EAAWO,QAAO,SAAAQ,GAAM,OAC9CA,EAAO3C,KAAK4C,cAAcC,SAASf,EAAWgB,wBAEhDP,QAAQC,IAAIE,EAAgBK,QAC5B,EAAKT,SAAS,CACZR,aACAD,SAAS,YAAKa,GACdM,MAAOC,KAAKC,KAAKR,EAAgBK,OAAS,O,EAI9CI,iBAAmB,SAAAhC,GACjBoB,QAAQC,IAAI,oBADU,IAEdX,EAAa,EAAKF,MAAlBE,SACRU,QAAQC,IAAIX,I,mFAvCZuB,KAAKd,SAAS,CACZV,WAAYP,EACZQ,SAAUR,EAAQgC,MAAM,EAAG,IAC3BC,OAAQ,GACRN,MAAO,O,+BA+CD,IAAD,OACPT,QAAQC,IAAI,qBACZD,QAAQC,IAAIY,KAAKzB,OAIjB,IANO,MAGyCyB,KAAKzB,MAA7CE,EAHD,EAGCA,SAAUC,EAHX,EAGWA,WAAYrB,EAHvB,EAGuBA,OAAQuC,EAH/B,EAG+BA,MAElCO,EAAQ,GACHC,EAAS,EAAGA,GAAUR,EAAOQ,IACpCD,EAAME,KACJ,kBAAC1C,EAAA,EAAWC,KAAZ,CAAiBE,QAAS,SAAAC,GAAC,OAAI,EAAKgC,iBAAiBhC,IAAIC,IAAKoC,GAC3DA,IAIP,OACE,kBAACE,EAAA,EAAD,CAAKC,GAAI,EAAGlE,UAAU,kCACpB,kBAAC,EAAD,CAAQX,kBAAmBsE,KAAKtE,kBAAmBD,WAAY,OAC/D,kBAAC+E,EAAA,EAAD,KACE,kBAACF,EAAA,EAAD,CAAKG,GAAI,EAAGpE,UAAU,yBACnB8D,EACD,kBAAC,EAAD,CACE9C,OAAQA,EACRD,kBAAmB4C,KAAK5C,qBAG5B,kBAACkD,EAAA,EAAD,CAAKG,GAAI,EAAGpE,UAAU,cACC,IAApBoC,EAASkB,OACR,kBAACe,EAAA,EAAD,CAAO7E,QAAQ,SAAS8E,aAAW,GACjC,kBAACD,EAAA,EAAME,QAAP,iCAC4BlC,EAD5B,KAGA,mDAEA,KACJ,kBAACmC,EAAA,EAAD,KACGpC,EAASjB,KAAI,SAACwB,EAAQtB,GACrB,OACE,kBAACoD,EAAA,EAAD,CAAW9C,IAAKN,EAAO7B,QAAQ,SAC7B,kBAAC,IAAD,CAAMkF,OAAQ,CAAEC,UAAW,SAAWC,GAAE,WAAMjC,EAAO7C,KACnD,kBAAC2E,EAAA,EAAUlD,KAAX,CAAgBI,IAAKN,GAAQsB,EAAOpC,mB,GAlGnCsE,aCJRC,EAJE,WACf,OAAO,qCCHM,GACbC,KAAM,IACNjF,GAAI,Q,QC2HSkF,E,YAtHb,aAAe,IAAD,8BACZ,+CAUFC,YAAc,WACZ,EAAKpC,SAAS,CACZqC,UAAU,KAbA,EAiBdC,eAAiB,WACf,GAAI,EAAKjD,MAAMgD,SACb,OAAO,kBAAC,IAAD,CAAUN,GAAG,eAnBV,EAsCdvF,kBAAoB,SAAAiD,GAClBQ,QAAQC,IAAI,kBADe,IAEnBqC,EAAgB,EAAKlD,MAArBkD,YACF/C,EAAaC,EAAMC,OAAOS,MAChCF,QAAQC,IAAIqC,GACZ,IAAM1C,EAAS0C,EAAY1C,QAAO,SAAAQ,GAAM,OACtCA,EAAO3C,KAAK4C,cAAcC,SAASf,EAAWgB,wBAEhDP,QAAQC,IAAIL,GACZ,EAAKG,SAAS,CACZR,aACAgD,oBAAqB3C,KA/CvB,EAAKR,MAAQ,CACXG,WAAY,GACZM,OAAQ,GACRyC,YAAa,GACbC,oBAAqB,GACrBH,UAAU,GAPA,E,iFAwBZpC,QAAQC,IAAI,WADM,IAEVjD,EAAO6D,KAAK2B,MAAMC,MAAMb,OAAxB5E,GACJV,EAAawC,EAAQ4D,MAAK,SAAA7C,GAAM,OAAIA,EAAO7C,MAAQA,KACvD,IAAKV,EAAY,OAAOuE,KAAKsB,cAC7B,IAAMQ,EAAsB7D,EAAQc,QAAO,SAAAC,GACzC,GAAIvD,EAAWgG,YAAYhC,SAAST,EAAO7C,IAAK,OAAO6C,KAEzDgB,KAAKd,SAAS,CACZF,OAAQvD,EACRgG,YAAaK,EACbJ,oBAAoB,YAAKI,O,gDAmBHH,GAAQ,IACxBxF,EAAOwF,EAAMC,MAAMb,OAAnB5E,GAERgD,QAAQC,IAAI,qCACZ,IAAI3D,EAAawC,EAAQ4D,MAAK,SAAA7C,GAAM,OAAIA,EAAO7C,MAAQA,KACvDgD,QAAQC,IAAI3D,GACZ,IAAMqG,EAAsB7D,EAAQc,QAAO,SAAAC,GACzC,GAAIvD,EAAWgG,YAAYhC,SAAST,EAAO7C,IAAK,OAAO6C,KAEzDgB,KAAKd,SAAS,CACZF,OAAQvD,EACRgG,YAAaK,EACbJ,oBAAqBI,M,+BAIf,IAAD,EAC6C9B,KAAKzB,MAAjDS,EADD,EACCA,OAAQ0C,EADT,EACSA,oBAAqBhD,EAD9B,EAC8BA,WACrC,OACE,kBAAC4B,EAAA,EAAD,CAAKyB,IAAI,GACP,kBAAC,EAAD,CACErG,kBAAmBsE,KAAKtE,kBACxBD,WAAYuD,IAEd,kBAACrD,EAAA,EAAD,CAAQC,GAAG,SACT,kBAACD,EAAA,EAAOW,MAAR,KACE,4CAAkBoF,EAAoB/B,OAAtC,OAG4B,IAA/B+B,EAAoB/B,OACnB,kBAACe,EAAA,EAAD,CAAO7E,QAAQ,SAAS8E,aAAW,GACjC,kBAACD,EAAA,EAAME,QAAP,iCAC4BlC,EAD5B,KAGA,mDAEA,KACJ,kBAACsD,EAAA,EAAD,KACGN,EAAoBlE,KAAI,SAACyE,EAAYvE,GACpC,OACE,kBAACmD,EAAA,EAAD,CAAM7C,IAAKN,EAAOrB,UAAU,eAC1B,kBAAC,IAAD,CAAM2B,IAAKN,EAAOuD,GAAE,WAAMgB,EAAW9F,KACnC,yBACEI,IAAK0F,EAAWzF,OAChBC,MAAM,OACNC,OAAO,OACPL,UAAU,2BACVM,IAAI,yBAEN,kBAACkE,EAAA,EAAKqB,KAAN,KACE,kBAACrB,EAAA,EAAKsB,MAAN,KAAaF,EAAWrF,QAG5B,kBAACiE,EAAA,EAAKqB,KAAN,KACE,kBAACrB,EAAA,EAAKuB,KAAN,KAAYH,EAAWI,wB,GA5GZnB,aCoBdoB,MAff,WACE,OACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,kBAAC,IAAD,KACE,kBAAChC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAOiC,KAAMC,EAAOtB,KAAMuB,UAAWrE,IACrC,kBAAC,IAAD,CAAOmE,KAAMC,EAAOvG,GAAIyG,OAAK,EAACD,UAAWtB,IACzC,kBAAC,IAAD,CAAOsB,UAAWxB,SCPV0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpB,MACvB,2D,MCXNqB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.449cfc53.chunk.js","sourcesContent":["import React from \"react\";\nimport { Navbar, Nav, Form, FormControl } from \"react-bootstrap\";\n\nconst NavBar = ({ thisClient, handleInputChange }) => {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" sticky=\"top\">\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        {thisClient ? (\n          <>\n            <Nav className=\"mr-auto\">\n              <Navbar.Brand>\n                <img\n                  src={thisClient.avatar}\n                  width=\"30\"\n                  height=\"30\"\n                  className=\"d-inline-block align-top\"\n                  alt={thisClient.name}\n                />\n              </Navbar.Brand>\n              <Navbar.Brand>{thisClient.name}</Navbar.Brand>\n            </Nav>\n          </>\n        ) : null}\n        <Form inline>\n          <FormControl\n            name=\"search\"\n            type=\"text\"\n            placeholder=\"Search\"\n            className=\"mr-sm-2\"\n            onChange={handleInputChange}\n          />\n        </Form>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport { Pagination } from \"react-bootstrap\";\n\nconst Alphabet = ({ handleButtonClick, letter }) => {\n  const alphabet = \"abcdefghijklmnopqrstuvwxyz\".toUpperCase().split(\"\");\n  return alphabet.map((x, index) => {\n    return (\n      <Pagination>\n        <Pagination.Item\n          active={x === letter}\n          onClick={e => handleButtonClick(e)}\n          key={index}\n        >\n          {x}\n        </Pagination.Item>\n      </Pagination>\n    );\n  });\n};\n\nexport default Alphabet;\n","import { Link } from \"react-router-dom\";\nimport NavBar from \"./NavBar\";\nimport { Row, Col, Alert, Card, ListGroup, Pagination } from \"react-bootstrap\";\nimport Alphabet from \"./Alphabet\";\nimport clients from \"../clients.json\";\n\nimport React, { Component } from \"react\";\n\nclients.sort((a, b) => a.name.localeCompare(b.name));\n\nclass Contacts extends Component {\n  state = {\n    allClients: clients,\n    filtered: [],\n    searchTerm: \"\",\n    letter: \"\"\n  };\n\n  componentDidMount() {\n    this.setState({\n      allClients: clients,\n      filtered: clients.slice(0, 50),\n      offset: 50,\n      pages: 20\n    });\n  }\n\n  handleButtonClick = event => {\n    const { allClients } = this.state;\n    const letter = event.target.innerText;\n    const startsWithN = allClients.filter(\n      client => client.name.charAt(0) === letter\n    );\n\n    this.setState({\n      filtered: [...startsWithN],\n      letter\n    });\n  };\n\n  handleInputChange = e => {\n    console.log(\"Contacts search\");\n    const { allClients } = this.state;\n    const searchTerm = e.target.value;\n    const filteredClients = allClients.filter(person =>\n      person.name.toLowerCase().includes(searchTerm.toLocaleLowerCase())\n    );\n    console.log(filteredClients.length);\n    this.setState({\n      searchTerm,\n      filtered: [...filteredClients],\n      pages: Math.ceil(filteredClients.length / 50)\n    });\n  };\n\n  handlePagination = e => {\n    console.log(\"Pagination CLick\");\n    const { filtered } = this.state;\n    console.log(filtered);\n  };\n  /* \n  handlePageClick = e => {\n    let selected = data.selected;\n    let offset = Math.ceil(selected * this.props.perPage);\n\n    this.setState({ offset: offset }, () => {\n      this.loadCommentsFromServer();\n    });\n  }; */\n\n  render() {\n    console.log(\"Rendered Contacts\");\n    console.log(this.state);\n    const { filtered, searchTerm, letter, pages } = this.state;\n\n    let items = [];\n    for (let number = 1; number <= pages; number++) {\n      items.push(\n        <Pagination.Item onClick={e => this.handlePagination(e)} key={number}>\n          {number}\n        </Pagination.Item>\n      );\n    }\n    return (\n      <Col sm={3} className=\"no-gutters padding-0 hidden-xs\">\n        <NavBar handleInputChange={this.handleInputChange} thisClient={null} />\n        <Row>\n          <Col md={4} className=\"no-gutters d-xs-none \">\n            {items}\n            <Alphabet\n              letter={letter}\n              handleButtonClick={this.handleButtonClick}\n            />\n          </Col>\n          <Col md={8} className=\"no-gutters\">\n            {filtered.length === 0 ? (\n              <Alert variant=\"danger\" dismissible>\n                <Alert.Heading>\n                  No connections found by \"{searchTerm}\"\n                </Alert.Heading>\n                <p>Try something else?</p>\n              </Alert>\n            ) : null}\n            <Card>\n              {filtered.map((client, index) => {\n                return (\n                  <ListGroup key={index} variant=\"flush\">\n                    <Link params={{ testvalue: \"hello\" }} to={`/${client.id}`}>\n                      <ListGroup.Item key={index}>{client.name}</ListGroup.Item>\n                    </Link>\n                  </ListGroup>\n                );\n              })}\n            </Card>\n          </Col>\n        </Row>\n      </Col>\n    );\n  }\n}\n\nexport default Contacts;\n","import React from \"react\";\n\nconst NotFound = () => {\n  return <div>404</div>;\n};\n\nexport default NotFound;\n","export default {\n  home: \"/\",\n  id: \"/:id\"\n};\n","import React, { Component } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport clients from \"../clients.json\";\nimport NavBar from \"./NavBar\";\nimport { Col, Alert, Navbar, CardColumns, Card } from \"react-bootstrap\";\n\nclass ContactDetails extends Component {\n  constructor() {\n    super();\n    this.state = {\n      searchTerm: \"\",\n      client: {},\n      connections: [],\n      filteredConnections: [],\n      redirect: false\n    };\n  }\n\n  setRedirect = () => {\n    this.setState({\n      redirect: true\n    });\n  };\n\n  renderRedirect = () => {\n    if (this.state.redirect) {\n      return <Redirect to=\"/error404\" />;\n    }\n  };\n\n  componentDidMount() {\n    console.log(\"mounted\");\n    const { id } = this.props.match.params;\n    let thisClient = clients.find(client => client.id === +id);\n    if (!thisClient) return this.setRedirect();\n    const connectionsOfClient = clients.filter(client => {\n      if (thisClient.connections.includes(client.id)) return client;\n    });\n    this.setState({\n      client: thisClient,\n      connections: connectionsOfClient,\n      filteredConnections: [...connectionsOfClient]\n    });\n  }\n\n  handleInputChange = event => {\n    console.log(\"details search\");\n    const { connections } = this.state;\n    const searchTerm = event.target.value;\n    console.log(connections);\n    const filter = connections.filter(person =>\n      person.name.toLowerCase().includes(searchTerm.toLocaleLowerCase())\n    );\n    console.log(filter);\n    this.setState({\n      searchTerm,\n      filteredConnections: filter\n    });\n  };\n\n  componentWillReceiveProps(props) {\n    const { id } = props.match.params;\n    // const { connections } = this.state;\n    console.log(\"Updated Contact Details Component\");\n    let thisClient = clients.find(client => client.id === +id);\n    console.log(thisClient);\n    const connectionsOfClient = clients.filter(client => {\n      if (thisClient.connections.includes(client.id)) return client;\n    });\n    this.setState({\n      client: thisClient,\n      connections: connectionsOfClient,\n      filteredConnections: connectionsOfClient\n    });\n  }\n\n  render() {\n    const { client, filteredConnections, searchTerm } = this.state;\n    return (\n      <Col xs={true}>\n        <NavBar\n          handleInputChange={this.handleInputChange}\n          thisClient={client}\n        />\n        <Navbar bg=\"light\">\n          <Navbar.Brand>\n            <h4>Connections ({filteredConnections.length})</h4>\n          </Navbar.Brand>\n        </Navbar>\n        {filteredConnections.length === 0 ? (\n          <Alert variant=\"danger\" dismissible>\n            <Alert.Heading>\n              No connections found by \"{searchTerm}\"\n            </Alert.Heading>\n            <p>Try something else?</p>\n          </Alert>\n        ) : null}\n        <CardColumns>\n          {filteredConnections.map((connection, index) => {\n            return (\n              <Card key={index} className=\"text-center\">\n                <Link key={index} to={`/${connection.id}`}>\n                  <img\n                    src={connection.avatar}\n                    width=\"100%\"\n                    height=\"auto\"\n                    className=\"d-inline-block align-top\"\n                    alt=\"React Bootstrap logo\"\n                  />\n                  <Card.Body>\n                    <Card.Title>{connection.name}</Card.Title>\n                  </Card.Body>\n                </Link>\n                <Card.Body>\n                  <Card.Text>{connection.description}</Card.Text>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Col>\n    );\n  }\n}\n\nexport default ContactDetails;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport Loading from \"./components/Loading\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nimport Contacts from \"./components/Contacts\";\nimport NotFound from \"./components/NotFound\";\nimport routes from \"./routes/routes\";\nimport ContactDetails from \"./components/ContactDetails\";\n\nfunction App() {\n  return (\n    <Router>\n      <Container fluid>\n        <Switch>\n          <Row>\n            <Route path={routes.home} component={Contacts}></Route>\n            <Route path={routes.id} exact component={ContactDetails}></Route>\n            <Route component={NotFound}></Route>\n          </Row>\n        </Switch>\n      </Container>\n    </Router>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}