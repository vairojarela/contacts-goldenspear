{"version":3,"sources":["components/NavBar.js","components/Alphabet.js","components/Contacts.js","components/ContactDetails.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","thisClient","handleInputChange","Navbar","bg","variant","expand","sticky","Toggle","aria-controls","Collapse","id","Nav","className","Brand","src","avatar","width","height","alt","name","Form","inline","FormControl","type","placeholder","onChange","Alphabet","handleButtonClick","letter","toUpperCase","split","map","x","index","Pagination","key","Item","active","onClick","e","clients","sort","a","b","localeCompare","Contacts","state","allClients","filtered","searchTerm","event","target","innerText","setState","pages","n","startsWithN","filter","client","charAt","offset","Math","ceil","length","page","value","filteredClients","person","toLowerCase","includes","toLocaleLowerCase","handlePagination","clicked","slice","tagName","this","renderedClients","i","push","ListGroup","to","Col","sm","Row","md","Alert","dismissible","Heading","Card","style","position","bottom","zIndex","size","Array","apply","el","Component","ContactDetails","setRedirect","redirect","renderRedirect","connections","filteredConnections","props","match","params","find","connectionsOfClient","Container","justifyContent","connection","Body","Title","right","App","basename","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"q+pkBAsCeA,EAnCA,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,kBAC5B,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,KAAKC,OAAO,OAClD,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBACjBV,EACC,oCACE,kBAACW,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACV,EAAA,EAAOW,MAAR,KACE,yBACEC,IAAKd,EAAWe,OAChBC,MAAM,KACNC,OAAO,KACPL,UAAU,2BACVM,IAAKlB,EAAWmB,QAGpB,kBAACjB,EAAA,EAAOW,MAAR,KAAeb,EAAWmB,QAG5B,KACJ,kBAACC,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CACEH,KAAK,SACLI,KAAK,OACLC,YAAY,SACZZ,UAAU,UACVa,SAAUxB,Q,wCCXPyB,EAhBE,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,kBAAmBC,EAAa,EAAbA,OAErC,MADiB,8BAA8BC,cAAcC,MAAM,IACnDC,KAAI,SAACC,EAAGC,GACtB,OACE,kBAACC,EAAA,EAAD,CAAYC,IAAKF,GACf,kBAACC,EAAA,EAAWE,KAAZ,CACEC,OAAQL,IAAMJ,EACdU,QAAS,SAAAC,GAAC,OAAIZ,EAAkBY,KAE/BP,Q,QCIXQ,EAAQC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEvB,KAAKyB,cAAcD,EAAExB,S,IA4J/B0B,E,2MAzJbC,MAAQ,CACNC,WAAY,GACZC,SAAU,GACVC,WAAY,KACZrB,OAAQ,I,EAaVD,kBAAoB,SAAAuB,GAAU,IAAD,EACE,EAAKJ,MAA5BC,EADqB,EACrBA,WAAYnB,EADS,EACTA,OAClB,GAA+B,MAA3BsB,EAAMC,OAAOC,UACf,OAAO,EAAKC,SAAS,CACnBL,SAAUD,EACVnB,OAAQ,IACR0B,MAAO,GACPL,WAAY,OAEXrB,EAASsB,EAAMC,OAAOC,UAC3B,IAAMG,EAAIL,EAAMC,OAAOC,UAEjBI,EAAcT,EAAWU,QAC7B,SAAAC,GAAM,OAAIA,EAAOvC,KAAKwC,OAAO,KAAO/B,KAEtC,EAAKyB,SAAS,CACZJ,WAAYrB,EACZoB,SAAUQ,EACV5B,OAAQ2B,EACRK,OAAQ,GACRN,MAAOO,KAAKC,KAAKN,EAAYO,OAAS,IACtCC,KAAM,K,EAIV/D,kBAAoB,SAAAsC,GAAM,IAChBQ,EAAe,EAAKD,MAApBC,WACFE,EAAaV,EAAEY,OAAOc,MACtBC,EAAkBnB,EAAWU,QAAO,SAAAU,GAAM,OAC9CA,EAAOhD,KAAKiD,cAAcC,SAASpB,EAAWqB,wBAEhD,EAAKjB,SAAS,CACZG,YAAa,KACbI,OAAQ,GACRI,KAAM,EACNf,aACAD,SAAUkB,EACVZ,MAAOO,KAAKC,KAAKI,EAAgBH,OAAS,O,EAI9CQ,iBAAmB,SAAAhC,GAAM,IAAD,EACqB,EAAKO,MAAxCC,EADc,EACdA,WAAYE,EADE,EACFA,WAAYrB,EADV,EACUA,OAE5B4C,GAAWjC,EAAEY,OAAOC,UAExB,GAA2B,MAAvBb,EAAEY,OAAOC,UACX,OAAO,EAAKC,SAAS,CACnBL,SAAUD,EACVE,WAAY,OAGhB,GAAIA,EAAY,CACd,IAAMO,EAAcT,EAAWU,QAC7B,SAAAC,GAAM,OAAIA,EAAOvC,KAAKwC,OAAO,KAAO/B,KAEtC,OAAO,EAAKyB,SAAS,CACnBL,SAAUQ,EAAYiB,MAAgB,GAAVD,EAAwB,GAAVA,EAAe,IACzDR,KAAMQ,IAGV,MAAuC,MAAnCjC,EAAEY,OAAOuB,QAAQN,cACZ,EAAKf,SAAS,CACnBL,SAAUD,EAAW0B,MAAgB,GAAVD,EAAwB,GAAVA,EAAe,IACxDZ,OAAkB,GAAVY,EACRR,KAAMQ,SAJV,G,mFAtEAG,KAAKtB,SAAS,CACZN,WAAYP,EACZQ,SAAUR,EACVoB,OAAQ,EACRI,KAAM,EACNV,MAAO,O,+BA0ED,IAAD,SAC0DqB,KAAK7B,MAAhEE,EADC,EACDA,SAAUC,EADT,EACSA,WAAYrB,EADrB,EACqBA,OAAQ0B,EAD7B,EAC6BA,MAAOU,EADpC,EACoCA,KAAMR,EAD1C,EAC0CA,YAC7CoB,EAAkB,GACtB,GAA0B,IAApB5B,EAASe,SAAgBP,EAC7B,IAAK,IAAIqB,EAAI,EAAGA,EAAI,IAAMA,EAAI7B,EAASe,OAAQc,IAC7CD,EAAgBE,KACd,kBAACC,EAAA,EAAD,CAAW5C,IAAK0C,EAAGzE,QAAQ,SACzB,kBAAC,IAAD,CAAM4E,GAAE,WAAMhC,EAAS6B,GAAGnE,KACxB,kBAACqE,EAAA,EAAU3C,KAAX,CAAgBD,IAAK0C,GAAI7B,EAAS6B,GAAG1D,SAM/C,OACE,kBAAC8D,EAAA,EAAD,CAAKC,GAAI,EAAGtE,UAAU,0CACpB,kBAAC,EAAD,CAAQX,kBAAmB0E,KAAK1E,kBAAmBD,WAAY,OAC/D,kBAACmF,EAAA,EAAD,KACE,kBAACF,EAAA,EAAD,CAAKG,GAAI,EAAGxE,UAAU,yBACpB,kBAAC,EAAD,CACEgB,OAAQA,EACRD,kBAAmBgD,KAAKhD,qBAG5B,kBAACsD,EAAA,EAAD,CAAKG,GAAI,GAAIxE,UAAU,cACA,IAApBoC,EAASe,OACR,kBAACsB,EAAA,EAAD,CAAOjF,QAAQ,SAASkF,aAAW,GACjC,kBAACD,EAAA,EAAME,QAAP,iCAC4BtC,EAD5B,KAGA,mDAGF,kBAACuC,EAAA,EAAD,KAAOZ,KAIb,kBAAC1E,EAAA,EAAD,CACEuF,MAAO,CACLC,SAAU,QACVC,OAAQ,IACR3E,MAAO,OACP4E,OAAQ,QAEVzF,GAAG,OACHG,OAAO,UAEP,kBAAC4B,EAAA,EAAD,CAAY2D,KAAK,MACdC,MAAMC,MAAM,KAAM,CAAEhC,OAAQT,IAASvB,KAAI,SAACiE,EAAI/D,GAC7C,OACE,kBAACC,EAAA,EAAWE,KAAZ,CACEE,QAAS,SAAAC,GAAC,OAAI,EAAKgC,iBAAiBhC,IACpCJ,IAAKF,EACLI,OAAQJ,IAAU+B,GAEjB/B,a,GA/IIgE,a,QCkKRC,E,YApKb,aAAe,IAAD,8BACZ,+CAaFC,YAAc,WACZ,EAAK9C,SAAS,CACZ+C,UAAU,KAhBA,EAoBdC,eAAiB,WACf,GAAI,EAAKvD,MAAMsD,SACb,OAAO,kBAAC,IAAD,CAAUpB,GAAG,eAtBV,EAyCd/E,kBAAoB,SAAAiD,GAAU,IACpBoD,EAAgB,EAAKxD,MAArBwD,YACFrD,EAAaC,EAAMC,OAAOc,MAC1BR,EAAS6C,EAAY7C,QAAO,SAAAU,GAAM,OACtCA,EAAOhD,KAAKiD,cAAcC,SAASpB,EAAWqB,wBAEhD,EAAKjB,SAAS,CACZJ,aACAsD,oBAAqB9C,KAjDX,EAmEdc,iBAAmB,SAAAhC,GAAM,IACf+D,EAAgB,EAAKxD,MAArBwD,YAG+B,MAAnC/D,EAAEY,OAAOuB,QAAQN,eACnB,EAAKf,SAAS,CACZW,MAAOzB,EAAEY,OAAOC,UAChBmD,oBAAqBD,EAAY7B,MACT,IAArBlC,EAAEY,OAAOC,UACY,IAArBb,EAAEY,OAAOC,UAAiB,IAE7BQ,OAA8B,IAArBrB,EAAEY,OAAOC,aA5EtB,EAAKN,MAAQ,CACXC,WAAYP,EACZS,WAAY,GACZS,OAAQ,GACR4C,YAAa,GACbC,oBAAqB,GACrBH,UAAU,EACV9C,MAAO,GACPU,KAAM,GAVI,E,iFA0BO,IACXtD,EAAOiE,KAAK6B,MAAMC,MAAMC,OAAxBhG,GACJV,EAAawC,EAAQmE,MAAK,SAAAjD,GAAM,OAAIA,EAAOhD,MAAQA,KACvD,IAAKV,EAAY,OAAO2E,KAAKwB,cAC7B,IAAMS,EAAsBpE,EAAQiB,QAAO,SAAAC,GACzC,GAAI1D,EAAWsG,YAAYjC,SAASX,EAAOhD,IAAK,OAAOgD,KAEzDiB,KAAKtB,SAAS,CACZC,MAAOO,KAAKC,KAAK8C,EAAoB7C,OAAS,IAC9CL,OAAQ1D,EACRsG,YAAaM,EACbL,oBAAqB,YAAIK,GAAqBnC,MAAM,EAAG,Q,gDAgBjC+B,GAAQ,IACxB9F,EAAO8F,EAAMC,MAAMC,OAAnBhG,GAEJV,EAAawC,EAAQmE,MAAK,SAAAjD,GAAM,OAAIA,EAAOhD,MAAQA,KACjDkG,EAAsBpE,EAAQiB,QAAO,SAAAC,GACzC,GAAI1D,EAAWsG,YAAYjC,SAASX,EAAOhD,IAAK,OAAOgD,KAEzDiB,KAAKtB,SAAS,CACZK,OAAQ1D,EACRsG,YAAaM,EACbL,oBAAqB,YAAIK,GAAqBnC,MAAM,EAAG,Q,+BAoBjD,IAAD,SAC0DE,KAAK7B,MAA9DY,EADD,EACCA,OAAQ6C,EADT,EACSA,oBAAqBtD,EAD9B,EAC8BA,WAAYqD,EAD1C,EAC0CA,YAD1C,EAEe3B,KAAK7B,MAArBQ,EAFC,EAEDA,MAAOU,EAFN,EAEMA,KAEb,OACE,kBAACiB,EAAA,EAAD,CAAKG,IAAI,GACP,kBAAC,EAAD,CACEnF,kBAAmB0E,KAAK1E,kBACxBD,WAAY0D,IAEd,kBAACxD,EAAA,EAAD,CAAQC,GAAG,SACT,kBAACD,EAAA,EAAOW,MAAR,KACE,4CACgB0F,EAAoBxC,OADpC,OACgDuC,EAAYvC,OAD5D,OAK4B,IAA/BwC,EAAoBxC,OACnB,kBAACsB,EAAA,EAAD,CAAOjF,QAAQ,WAAf,4BAC4B6C,EAD5B,IACwC,6BACtC,6BAFF,uBAKE,KACJ,kBAAC4D,EAAA,EAAD,KACE,kBAAC1B,EAAA,EAAD,CAAKM,MAAO,CAAEqB,eAAgB,iBAC3BP,EAAoBxE,KAAI,SAACgF,EAAY9E,GACpC,OACE,kBAACuD,EAAA,EAAD,CACEC,MAAO,CAAEzE,MAAO,OAChBmB,IAAKF,EACLrB,UAAU,eAEV,kBAAC,IAAD,CAAMuB,IAAKF,EAAO+C,GAAE,WAAM+B,EAAWrG,KACnC,yBACEI,IAAKiG,EAAWhG,OAChBC,MAAM,OACNC,OAAO,OACPL,UAAU,2BACVM,IAAK6F,EAAW5F,OAElB,kBAACqE,EAAA,EAAKwB,KAAN,KACE,kBAACxB,EAAA,EAAKyB,MAAN,KAAaF,EAAW5F,cAQtC,kBAACjB,EAAA,EAAD,CACEC,GAAG,OACHG,OAAO,SACPmF,MAAO,CACLC,SAAU,QACVC,OAAQ,IACR3E,MAAO,MACPkG,MAAO,MACPtB,OAAQ,UAGV,kBAACxE,EAAA,EAAD,CAAMC,QAAM,IACZ,kBAACa,EAAA,EAAD,CAAY2D,KAAK,MACdC,MAAMC,MAAM,KAAM,CAAEhC,OAAQT,IAASvB,KAAI,SAACiE,EAAI/D,GAC7C,OACE,kBAACC,EAAA,EAAWE,KAAZ,CACEE,QAAS,SAAAC,GAAC,OAAI,EAAKgC,iBAAiBhC,IACpCJ,IAAKF,EACLI,OAAQJ,IAAU+B,GAEjB/B,a,GA1JUgE,aCOdkB,MAff,WACE,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,kBAACP,EAAA,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC1B,EAAA,EAAD,KACE,kBAAC,IAAD,CAAOkC,KAAM,IAAKC,UAAWzE,IAE7B,kBAAC,IAAD,CAAOwE,KAAM,OAAQE,OAAK,EAACD,UAAWpB,SCH9BsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlB,MACvB,2D,MCXNmB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.94ac71ef.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, Nav, Form, FormControl } from \"react-bootstrap\";\r\n\r\nconst NavBar = ({ thisClient, handleInputChange }) => {\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" sticky=\"top\">\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        {thisClient ? (\r\n          <>\r\n            <Nav className=\"mr-auto\">\r\n              <Navbar.Brand>\r\n                <img\r\n                  src={thisClient.avatar}\r\n                  width=\"30\"\r\n                  height=\"30\"\r\n                  className=\"d-inline-block align-top\"\r\n                  alt={thisClient.name}\r\n                />\r\n              </Navbar.Brand>\r\n              <Navbar.Brand>{thisClient.name}</Navbar.Brand>\r\n            </Nav>\r\n          </>\r\n        ) : null}\r\n        <Form inline>\r\n          <FormControl\r\n            name=\"search\"\r\n            type=\"text\"\r\n            placeholder=\"Search\"\r\n            className=\"mr-sm-2\"\r\n            onChange={handleInputChange}\r\n          />\r\n        </Form>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport { Pagination } from \"react-bootstrap\";\r\n\r\nconst Alphabet = ({ handleButtonClick, letter }) => {\r\n  const alphabet = \"#abcdefghijklmnopqrstuvwxyz\".toUpperCase().split(\"\");\r\n  return alphabet.map((x, index) => {\r\n    return (\r\n      <Pagination key={index}>\r\n        <Pagination.Item\r\n          active={x === letter}\r\n          onClick={e => handleButtonClick(e)}\r\n        >\r\n          {x}\r\n        </Pagination.Item>\r\n      </Pagination>\r\n    );\r\n  });\r\n};\r\n\r\nexport default Alphabet;\r\n","import { Link } from \"react-router-dom\";\r\nimport NavBar from \"./NavBar\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Alert,\r\n  Card,\r\n  ListGroup,\r\n  Pagination,\r\n  Navbar\r\n} from \"react-bootstrap\";\r\nimport Alphabet from \"./Alphabet\";\r\nimport clients from \"../clients.json\";\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclients.sort((a, b) => a.name.localeCompare(b.name));\r\n\r\nclass Contacts extends Component {\r\n  state = {\r\n    allClients: [],\r\n    filtered: [],\r\n    searchTerm: null,\r\n    letter: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      allClients: clients,\r\n      filtered: clients,\r\n      offset: 0,\r\n      page: 0,\r\n      pages: 20\r\n    });\r\n  }\r\n\r\n  handleButtonClick = event => {\r\n    let { allClients, letter } = this.state;\r\n    if (event.target.innerText === \"#\")\r\n      return this.setState({\r\n        filtered: allClients,\r\n        letter: \"#\",\r\n        pages: 20,\r\n        searchTerm: null\r\n      });\r\n    else letter = event.target.innerText;\r\n    const n = event.target.innerText;\r\n\r\n    const startsWithN = allClients.filter(\r\n      client => client.name.charAt(0) === letter\r\n    );\r\n    this.setState({\r\n      searchTerm: letter,\r\n      filtered: startsWithN,\r\n      letter: n,\r\n      offset: 50,\r\n      pages: Math.ceil(startsWithN.length / 50),\r\n      page: 0\r\n    });\r\n  };\r\n\r\n  handleInputChange = e => {\r\n    const { allClients } = this.state;\r\n    const searchTerm = e.target.value;\r\n    const filteredClients = allClients.filter(person =>\r\n      person.name.toLowerCase().includes(searchTerm.toLocaleLowerCase())\r\n    );\r\n    this.setState({\r\n      startsWithN: null,\r\n      offset: 50,\r\n      page: 0,\r\n      searchTerm,\r\n      filtered: filteredClients,\r\n      pages: Math.ceil(filteredClients.length / 50)\r\n    });\r\n  };\r\n\r\n  handlePagination = e => {\r\n    const { allClients, searchTerm, letter } = this.state;\r\n    //Check if its a link\r\n    let clicked = +e.target.innerText;\r\n\r\n    if (e.target.innerText === \"#\") {\r\n      return this.setState({\r\n        filtered: allClients,\r\n        searchTerm: null\r\n      });\r\n    }\r\n    if (searchTerm) {\r\n      const startsWithN = allClients.filter(\r\n        client => client.name.charAt(0) === letter\r\n      );\r\n      return this.setState({\r\n        filtered: startsWithN.slice(clicked * 50, clicked * 50 + 50),\r\n        page: clicked\r\n      });\r\n    }\r\n    if (e.target.tagName.toLowerCase() === \"a\") {\r\n      return this.setState({\r\n        filtered: allClients.slice(clicked * 50, clicked * 50 + 50),\r\n        offset: clicked * 50,\r\n        page: clicked\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let { filtered, searchTerm, letter, pages, page, startsWithN } = this.state;\r\n    let renderedClients = [];\r\n    if (!(filtered.length === 0 && startsWithN)) {\r\n      for (let i = 0; i < 50 && i < filtered.length; i++) {\r\n        renderedClients.push(\r\n          <ListGroup key={i} variant=\"flush\">\r\n            <Link to={`/${filtered[i].id}`}>\r\n              <ListGroup.Item key={i}>{filtered[i].name}</ListGroup.Item>\r\n            </Link>\r\n          </ListGroup>\r\n        );\r\n      }\r\n    }\r\n    return (\r\n      <Col sm={3} className=\"no-gutters padding-0 d-none d-md-block\">\r\n        <NavBar handleInputChange={this.handleInputChange} thisClient={null} />\r\n        <Row>\r\n          <Col md={2} className=\"no-gutters d-xs-none \">\r\n            <Alphabet\r\n              letter={letter}\r\n              handleButtonClick={this.handleButtonClick}\r\n            />\r\n          </Col>\r\n          <Col md={10} className=\"no-gutters\">\r\n            {filtered.length === 0 ? (\r\n              <Alert variant=\"danger\" dismissible>\r\n                <Alert.Heading>\r\n                  No connections found by \"{searchTerm}\"\r\n                </Alert.Heading>\r\n                <p>Try something else?</p>\r\n              </Alert>\r\n            ) : (\r\n              <Card>{renderedClients}</Card>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n        <Navbar\r\n          style={{\r\n            position: \"fixed\",\r\n            bottom: \"0\",\r\n            width: \"100%\",\r\n            zIndex: \"1000\"\r\n          }}\r\n          bg=\"dark\"\r\n          sticky=\"bottom\"\r\n        >\r\n          <Pagination size=\"sm\">\r\n            {Array.apply(null, { length: pages }).map((el, index) => {\r\n              return (\r\n                <Pagination.Item\r\n                  onClick={e => this.handlePagination(e)}\r\n                  key={index}\r\n                  active={index === page}\r\n                >\r\n                  {index}\r\n                </Pagination.Item>\r\n              );\r\n            })}\r\n          </Pagination>\r\n        </Navbar>\r\n      </Col>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contacts;\r\n","import React, { Component } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport clients from \"../clients.json\";\r\nimport NavBar from \"./NavBar\";\r\nimport {\r\n  Col,\r\n  Alert,\r\n  Navbar,\r\n  Row,\r\n  Card,\r\n  Container,\r\n  Pagination,\r\n  Form\r\n} from \"react-bootstrap\";\r\n\r\nclass ContactDetails extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      allClients: clients,\r\n      searchTerm: \"\",\r\n      client: {},\r\n      connections: [],\r\n      filteredConnections: [],\r\n      redirect: false,\r\n      pages: 19,\r\n      page: 0\r\n    };\r\n  }\r\n\r\n  setRedirect = () => {\r\n    this.setState({\r\n      redirect: true\r\n    });\r\n  };\r\n\r\n  renderRedirect = () => {\r\n    if (this.state.redirect) {\r\n      return <Redirect to=\"/error404\" />;\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { id } = this.props.match.params;\r\n    let thisClient = clients.find(client => client.id === +id);\r\n    if (!thisClient) return this.setRedirect();\r\n    const connectionsOfClient = clients.filter(client => {\r\n      if (thisClient.connections.includes(client.id)) return client;\r\n    });\r\n    this.setState({\r\n      pages: Math.ceil(connectionsOfClient.length / 50),\r\n      client: thisClient,\r\n      connections: connectionsOfClient,\r\n      filteredConnections: [...connectionsOfClient].slice(0, 50)\r\n    });\r\n  }\r\n\r\n  handleInputChange = event => {\r\n    const { connections } = this.state;\r\n    const searchTerm = event.target.value;\r\n    const filter = connections.filter(person =>\r\n      person.name.toLowerCase().includes(searchTerm.toLocaleLowerCase())\r\n    );\r\n    this.setState({\r\n      searchTerm,\r\n      filteredConnections: filter\r\n    });\r\n  };\r\n\r\n  componentWillReceiveProps(props) {\r\n    const { id } = props.match.params;\r\n    // const { connections } = this.state;\r\n    let thisClient = clients.find(client => client.id === +id);\r\n    const connectionsOfClient = clients.filter(client => {\r\n      if (thisClient.connections.includes(client.id)) return client;\r\n    });\r\n    this.setState({\r\n      client: thisClient,\r\n      connections: connectionsOfClient,\r\n      filteredConnections: [...connectionsOfClient].slice(0, 50)\r\n    });\r\n  }\r\n\r\n  handlePagination = e => {\r\n    const { connections } = this.state;\r\n    //Check if its a link\r\n\r\n    if (e.target.tagName.toLowerCase() === \"a\") {\r\n      this.setState({\r\n        page: +e.target.innerText,\r\n        filteredConnections: connections.slice(\r\n          +e.target.innerText * 50,\r\n          +e.target.innerText * 50 + 50\r\n        ),\r\n        offset: +e.target.innerText * 50\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { client, filteredConnections, searchTerm, connections } = this.state;\r\n    let { pages, page } = this.state;\r\n\r\n    return (\r\n      <Col md={true}>\r\n        <NavBar\r\n          handleInputChange={this.handleInputChange}\r\n          thisClient={client}\r\n        />\r\n        <Navbar bg=\"light\">\r\n          <Navbar.Brand>\r\n            <h4>\r\n              Connections ({filteredConnections.length} of {connections.length})\r\n            </h4>\r\n          </Navbar.Brand>\r\n        </Navbar>\r\n        {filteredConnections.length === 0 ? (\r\n          <Alert variant=\"warning\">\r\n            No connections found by \"{searchTerm}\"<br />\r\n            <br />\r\n            Try something else?\r\n          </Alert>\r\n        ) : null}\r\n        <Container>\r\n          <Row style={{ justifyContent: \"space-evenly\" }}>\r\n            {filteredConnections.map((connection, index) => {\r\n              return (\r\n                <Card\r\n                  style={{ width: \"25%\" }}\r\n                  key={index}\r\n                  className=\"text-center\"\r\n                >\r\n                  <Link key={index} to={`/${connection.id}`}>\r\n                    <img\r\n                      src={connection.avatar}\r\n                      width=\"100%\"\r\n                      height=\"auto\"\r\n                      className=\"d-inline-block align-top\"\r\n                      alt={connection.name}\r\n                    />\r\n                    <Card.Body>\r\n                      <Card.Title>{connection.name}</Card.Title>\r\n                    </Card.Body>\r\n                  </Link>\r\n                </Card>\r\n              );\r\n            })}\r\n          </Row>\r\n        </Container>\r\n        <Navbar\r\n          bg=\"dark\"\r\n          sticky=\"bottom\"\r\n          style={{\r\n            position: \"fixed\",\r\n            bottom: \"0\",\r\n            width: \"10%\",\r\n            right: \"10%\",\r\n            zIndex: \"10000\"\r\n          }}\r\n        >\r\n          <Form inline></Form>\r\n          <Pagination size=\"sm\">\r\n            {Array.apply(null, { length: pages }).map((el, index) => {\r\n              return (\r\n                <Pagination.Item\r\n                  onClick={e => this.handlePagination(e)}\r\n                  key={index}\r\n                  active={index === page}\r\n                >\r\n                  {index}\r\n                </Pagination.Item>\r\n              );\r\n            })}\r\n          </Pagination>\r\n        </Navbar>\r\n      </Col>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactDetails;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\nimport { Container, Row } from \"react-bootstrap\";\r\nimport Contacts from \"./components/Contacts\";\r\nimport ContactDetails from \"./components/ContactDetails\";\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter basename=\"/\">\r\n      <Container>\r\n        <Switch>\r\n          <Row>\r\n            <Route path={\"/\"} component={Contacts}></Route>\r\n\r\n            <Route path={\"/:id\"} exact component={ContactDetails}></Route>\r\n          </Row>\r\n        </Switch>\r\n      </Container>\r\n    </HashRouter>\r\n  );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}